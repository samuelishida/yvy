stages:
  - build
  - test
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  APP_NETWORK: app-network

# Etapa de Build e Testes para MongoDB
setup_mongo:
  stage: build
  image: docker:24.0.2
  services:
    - docker:24.0.2-dind
  script:
    - docker network create $APP_NETWORK
    - docker pull mongo:latest
    - docker run -d --name mongo --network $APP_NETWORK -e MONGO_INITDB_ROOT_USERNAME=root -e MONGO_INITDB_ROOT_PASSWORD=example -v $CI_PROJECT_DIR/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro -v $CI_PROJECT_DIR/mongo_data:/data/db -p 27017:27017 mongo:latest
  only:
    - main

# Etapa de Build do Backend
build_backend:
  stage: build
  image: docker:24.0.2
  services:
    - docker:24.0.2-dind
  script:
    - docker build -t backend ./backend
  dependencies:
    - setup_mongo
  only:
    - main

# Etapa de Build do Frontend
build_frontend:
  stage: build
  image: docker:24.0.2
  services:
    - docker:24.0.2-dind
  script:
    - docker build -t frontend ./frontend
  dependencies:
    - build_backend
  only:
    - main

# Etapa de Deploy e Inicialização dos Containers
deploy_application:
  stage: deploy
  image: docker:24.0.2
  services:
    - docker:24.0.2-dind
  script:
    # Inicializando o MongoDB
    - docker run --name mongo --network $APP_NETWORK -e MONGO_INITDB_ROOT_USERNAME=root -e MONGO_INITDB_ROOT_PASSWORD=example -v $CI_PROJECT_DIR/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro -v $CI_PROJECT_DIR/mongo_data:/data/db -p 27017:27017 mongo:latest
    
    # Build e execução do backend
    - docker build -t backend ./backend
    - docker run --name backend --network $APP_NETWORK -e MONGO_URI=mongodb://root:example@mongo:27017/ -v $CI_PROJECT_DIR/backend:/app -p 5000:5000 backend
    
    # Build e execução do frontend
    - docker build -t frontend ./frontend
    - docker run --name frontend --network $APP_NETWORK -p 3000:3000 frontend
  dependencies:
    - setup_network
  only:
    - main
